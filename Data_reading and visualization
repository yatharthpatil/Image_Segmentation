# imorting necessary library

import numpy as np
import tensorflow as tf
from tensorflow import keras
from keras import layers
import math
import os
import glob
import matplotlib.pyplot as plt

# here we are getting all the precomputed dataset, In this project i am implementing Faster RCNN for locating a box for lesions. For the first phase i used mannualy 
# cropped images for testing my model

import os
import glob
import numpy as np


path = '/content/drive/MyDrive/DL_pro_dataset/'
temp = os.path.join(path,'*.npy')
images = glob.glob(temp)

mask = []
image = []

for img in images:
  # print(np.load(img,allow_pickle = True).shape)
  temp1  = np.load(img,allow_pickle = True)
  for i in range(len(temp1)):


    mask.append(tf.pad(temp1[i][:,:,0],([[4,4],[4,4]])))
    image.append(tf.pad(temp1[i][:,:,1],([[4,4],[4,4]])))

# image visualization

plt.imshow(image[69],cmap = 'gray' )
plt.imshow(mask[69],alpha = 0.5)
plt.axis('off')
print(mask[0].shape)

plt.imshow(image[69],cmap = 'gray' )
print(len(mask))
print(len(image))

# training and validation dataset split

# here we are taking out randomly choosen 25 images and mask for validation

mask = np.array(mask)
image = np.array(image)

mask = mask.tolist()
image = image.tolist()

r = [np.random.randint(0,571) for i in range(25)]

val_image = []
val_mask = []
train_mask = []
train_image = []

for i in range(25):
  val_image.append(image[r[i]])
  val_mask.append(mask[r[i]])
  image.pop(r[i])
  mask.pop(r[i])

# here we are taking out randomly choosen 25 images and mask for validation

mask = np.array(mask)
image = np.array(image)

mask = mask.tolist()
image = image.tolist()

r = [np.random.randint(0,571) for i in range(25)]

val_image = []
val_mask = []
train_mask = []
train_image = []

for i in range(25):
  val_image.append(image[r[i]])
  val_mask.append(mask[r[i]])
  image.pop(r[i])
  mask.pop(r[i])

# print(image_f[0].shape)
# adding noise to the images randomly

for i in range(len(image)):
  flag = np.random.uniform(0,1)
  noise = np.random.normal(0,30,(128,128))

  if flag > 0.7:
    image[i] = tf.clip_by_value(image[i] + noise,0,255)
# here we are changing the classes and images to integer values

image = tf.cast(image, dtype = tf.int32)
mask = tf.cast(mask,dtype = tf.int32)
val_image = tf.cast(val_image, dtype = tf.int32)
val_mask = tf.cast(val_mask, dtype = tf.int32)

train_image = image
train_mask = mask


