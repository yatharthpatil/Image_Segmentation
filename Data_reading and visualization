# importing Libraries

import numpy as np
import tensorflow as tf
from tensorflow import keras
from keras import layers
import math
import os
import glob
import matplotlib.pyplot as plt

# Data Reading and Generation with Data Visualisation

path = '/content/drive/MyDrive/images'
temp = os.path.join(path,'*.npy')
images = glob.glob(temp)


data = [0 for i in range(5)]
data_mask = [0 for i in range(5)]
for img in images:
  tokens = img.split('_')
  # print(tokens)
  if (tokens[-1]) == 'label.npy':
    token = tokens[0].split('/')
    data_mask[int(token[-1])-1] = tf.expand_dims(np.load(img), axis = 2)
  else:
    # img_temp = np.load(img)
    # img_temp = tf.expand_dims(img_temp,axis = 2)
    token = tokens[0].split('.')
    token1 = token[0].split('/')
    data[int(token1[-1])-1] = tf.expand_dims(np.load(img),axis = 2)


print(len(data))
print(len(data_mask))



plt.figure(figsize=(20,20))
for i in range(5):
  plt.subplot(1,5,i+1)
  plt.imshow(data[i],cmap = 'gray')
  plt.axis('off')


cmap = plt.cm.get_cmap('jet', 8)
plt.figure(figsize=(20,20))
for i in range(5):
  plt.subplot(1,5,i+1)
  plt.imshow(data_mask[i],cmap = cmap)
  plt.axis('off')

plt.imshow(data[0],cmap = 'gray')
plt.imshow(data_mask[0],cmap = cmap , alpha = 0.5)
plt.axis('off')
plt.show()


from tensorflow.keras.preprocessing.image import ImageDataGenerator

data_f = []

for i in range(5):
  data_f.append(tf.concat([data[i],data_mask[i]], axis = 2))

data_f = np.stack(data_f)

datagen = ImageDataGenerator(
    rotation_range=10,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.1,
    zoom_range=0.2,
    horizontal_flip=True,
    vertical_flip = True,
    fill_mode='nearest',
)

generator = datagen.flow(data_f)

image = []
mask = []
for i,gen in enumerate(generator):
  for j in range(5):
    image.append(tf.cast(gen[j,:,:,0],dtype = tf.int32))
    mask.append(tf.cast(gen[j,:,:,1],dtype = tf.int32))

  if i > 50:
    break
print(len(image))

print(image[0].shape)
print(mask[0].shape)

plt.imshow(image[0],cmap='gray')
plt.imshow(mask[0],cmap = cmap, alpha = 0.5)
plt.axis('off')
plt.show()

# Data set creation

train_image = image[:200]
train_mask = mask[:200]
val_image = image[200:260]
val_mask = mask[200:260]
